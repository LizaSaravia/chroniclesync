name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      cloudflare_action:
        description: 'Cloudflare setup action'
        required: false
        type: choice
        options:
          - none
          - create-resources
          - update-schema
          - reset-database
        default: 'none'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [worker, pages]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ matrix.project }}
        
      - name: Run linter
        run: npm run lint
        working-directory: ${{ matrix.project }}
        
      - name: Run tests
        run: npm run test:coverage
        working-directory: ${{ matrix.project }}

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json
      
      - name: Deploy worker to staging
        run: |
          cd worker
          npm ci
          npm run deploy -- --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy pages to staging
        run: |
          cd pages
          npm ci
          npm run deploy -- --project-name chroniclesync-pages-staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  deploy-production:
    needs: [test, deploy-staging]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' &&
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            **/package-lock.json

      - name: Deploy worker to production
        if: contains(github.event.head_commit.modified, 'worker/') || github.event_name == 'workflow_dispatch'
        run: |
          cd worker
          npm ci
          npm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy pages to production
        if: contains(github.event.head_commit.modified, 'pages/') || github.event_name == 'workflow_dispatch'
        run: |
          cd pages
          npm ci
          npm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  cloudflare-setup:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.inputs.cloudflare_action != 'none'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          cd worker
          npm install
          npm install -g wrangler

      - name: Create Resources
        if: github.event.inputs.cloudflare_action == 'create-resources'
        run: |
          # Create D1 database
          wrangler d1 create sync_db
          # Create R2 bucket
          wrangler r2 bucket create sync-storage
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update or Reset Schema
        if: |
          github.event.inputs.cloudflare_action == 'update-schema' ||
          github.event.inputs.cloudflare_action == 'reset-database'
        run: |
          echo "
          DROP TABLE IF EXISTS clients;
          CREATE TABLE clients (
            client_id TEXT PRIMARY KEY,
            last_sync DATETIME,
            data_size INTEGER
          );
          " > schema.sql
          wrangler d1 execute sync_db --file=schema.sql --remote
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}